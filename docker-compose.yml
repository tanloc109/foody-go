# docker compose up -d
# docker compose down --volumes
services:

  config-server:
    container_name: config-server
    build:
      context: ./services/config-server
    image: config-server:latest
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  discovery:
    container_name: discovery
    build:
      context: ./services/discovery
    image: discovery:latest
    depends_on:
      - config-server
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  gateway:
    container_name: gateway
    build:
      context: ./services/gateway
    image: gateway:latest
    depends_on:
      - discovery
    ports:
      - "8080:8080"

  shipping-service:
    container_name: shipping-service
    build:
      context: ./services/shipping-service
    image: shipping-service:latest
    depends_on:
      - discovery
    ports:
      - "8086:8086"

  mysql:
    container_name: mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_DATABASE: foodygo
    ports:
      - "3306:3306"
    volumes:
      - mysql:/var/lib/mysql
    profiles:
      - init
    restart: unless-stopped

  mongodb:
    container_name: mongodb
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb_root
      MONGO_INITDB_ROOT_PASSWORD: mongodb_root
      MONGO_INITDB_DATABASE: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./sql/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongo:/data/lib
    profiles:
      - init
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    profiles:
      - init
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    profiles:
      - init
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    profiles:
      - init
    depends_on:
      - zookeeper

volumes:
  mysql:
  mongo:
  redis: